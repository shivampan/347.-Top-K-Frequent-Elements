class Solution {
public:
    struct compare {
    bool operator()(pair<int, int> p1, pair<int, int> p2)
    {
        // if frequencies of two elements are same
        // then the larger number should come first
        if (p1.second == p2.second)
            return p1.first < p2.first;
 
        // insert elements in the priority queue on the basis of
        // decreasing order of frequencies
        return p1.second < p2.second;
    }
};
    vector<int> topKFrequent(vector<int>& nums, int k) {
    map<int,int>um;vector<int> ans;
    for(int i=0;i<nums.size();i++)um[nums[i]]++;
   priority_queue<pair<int, int>, vector<pair<int, int> >,compare> pq(um.begin(), um.end());
    for(int i=1;i<=k;i++) {
    ans.push_back(pq.top().first);
        pq.pop();
    }
        return ans;
    }
};
